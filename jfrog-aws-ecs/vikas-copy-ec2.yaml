AWSTemplateFormatVersion: 2010-09-09
Description: vps for ecs
Parameters:
  MasterKey:
    Type: String
    NoEcho: 'true'
  DBType:
    Type: String
  DatabaseUser:
    Type: String
  DatabaseName:
    Type: String
  DatabasePassword:
    Type: String
    NoEcho: 'true'
  BucketName:
    Description: Name of MyS3Bucket
    Type: String
    Default: jfro-ecs-storage
  VPC:
    Type: String
  Subnet1: 
    Type: String
  Subnet2: 
    Type: String

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

      
  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - 'Fn::GetAZs': !Ref 'AWS::Region'
      CidrBlock: !Sub 10.0.0.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 1
        - 'Fn::GetAZs': !Ref 'AWS::Region'
      CidrBlock: !Sub 10.0.32.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub
        ${ClusterName}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - ec2.amazonaws.com
                - ecs.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: 
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListClusters
                  - ecs:ListServices
                  - ecs:DescribeServices
                  - ecr:ListImages
                  - ecs:RegisterTaskDefinition
                  - ecs:CreateService
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:CreateService
                  - ecs:DeleteService
                  - ecs:UpdateService
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeTaskDefinition
                  - application-autoscaling:DescribeScalableTargets
                  - iam:ListRoles
                Resource: "*"
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: jfrog
  ArtifactoryLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: false
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref ECSInstanceProfile
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroups:
        - !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      LaunchConfigurationName: ArtifactoryECSEC2LaunchConfig
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
  ArtifactoryScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: ArtifactoryECSEC2ScaleGroup
      LaunchConfigurationName: !Ref ArtifactoryLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
      MinSize: !Ref MinScalingNodes
      MaxSize: !Ref MaxScalingNodes
      Cooldown: '300'
      DesiredCapacity: !Ref MinScalingNodes
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      Tags:
        - Key: Name
          Value: !Ref DeploymentTag
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M  
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref ServiceName
      LaunchType: EC2
      DesiredCount: !Ref NumberNodes
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 443
          TargetGroupArn: !Ref ArtifactoryTargetGroupArn
      TaskDefinition:
        Ref: ArtifactoryTaskDefinition
      HealthCheckGracePeriodSeconds: 300
  ArtifactoryTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "2048"
      Family: !Sub ${ServiceName}-Task
      Memory: "4096"
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Ref ECSRoleArn
      Volumes:
        - Name: etc
          Host: 
            SourcePath: /data/jfrog/artifactory/etc/
        - Name: temp-plugins
          Host: 
            SourcePath: /data/jfrog/artifactory/tmp/plugins
        - Name: java-certs
          Host: 
            SourcePath: /data/jfrog/artifactory/java_certs
        - Name: plugins
          Host: 
            SourcePath: !Sub 
              /data/jfrog/artifactory/plugins/${DBPlugin}
        - Name: nginx
          Host: 
            SourcePath: /data/jfrog/nginx
      ContainerDefinitions:
        - Name: artifactory
          EntryPoint:
            - /bin/bash
            - "-c"
          Command: 
            - "echo export HA_HOST_IP=`wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4` > /tmp/source; echo /entrypoint-artifactory.sh >> /tmp/source; chmod +x /tmp/source; /tmp/source"
          Image: !Sub
            docker.bintray.io/jfrog/artifactory-pro:${ArtifactoryVersion}
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8081
              Protocol: tcp
          MountPoints:
            - ContainerPath: /artifactory_extra_conf
              ReadOnly: False
              SourceVolume: etc
            - ContainerPath: /tmp/plugins
              ReadOnly: False
              SourceVolume: temp-plugins
            - ContainerPath: /artifactory_extra_certs
              ReadOnly: False
              SourceVolume: java-certs
            - ContainerPath: !Sub 
                /opt/jfrog/artifactory/tomcat/lib/${DBPlugin}
              ReadOnly: False
              SourceVolume: plugins                           
          Ulimits:
            - Name: nproc
              SoftLimit: 65535
              HardLimit: 65535
            - Name: nofile
              SoftLimit: 32000
              HardLimit: 40000
          HealthCheck:
            Command: 
              - CMD-SHELL
              - (printf 'GET /artifactory/api/system/ping HTTP/1.0\r\n\r\n'; sleep 1) | nc 127.0.0.1 8081 | grep OK || exit 1
            Interval: 5
            Retries: 3
            StartPeriod: 60
            Timeout: 10
          Environment:
            - Name: EXTRA_JAVA_OPTIONS
              Value: !Ref ExtraJavaOptions
            - Name: ARTIFACTORY_MASTER_KEY
              Value: !Ref MasterKey
            - Name: HA_IS_PRIMARY
              Value: !Ref ArtifactoryPrimary
            - Name: DB_URL
              Value: !Sub
                jdbc:mysql://${ArtifactoryDBEndpointAddress}:3306/${DatabaseName}?characterEncoding=UTF-8&elideSetAutoCommits=true&verifyServerCertificate=true&useSSL=true&requireSSL=true 
            - Name: DB_TYPE
              Value: !Ref DBType
            - Name: DB_USER
              Value: !Ref DatabaseUser
            - Name: DB_PASSWORD
              Value: !Ref DatabasePassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: artifactory
        - Name: nginx
          Image: !Sub
            docker.bintray.io/jfrog/nginx-artifactory-pro:${ArtifactoryVersion}
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
          Essential: false
          DependsOn: 
            - Condition: HEALTHY
              ContainerName: artifactory
          Links:
            - artifactory:artifactory
          MountPoints:
            - ContainerPath: /var/opt/jfrog/nginx
              ReadOnly: False
              SourceVolume: nginx
          Ulimits:
            - Name: nproc
              SoftLimit: 65535
              HardLimit: 65535
            - Name: nofile
              SoftLimit: 32000
              HardLimit: 40000
          Environment:
            - Name: ART_BASE_URL
              Value: http://artifactory:8081/artifactory
            - Name: SSL
              Value: "true"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: nginx     
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: ecs-services
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 8081
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  DefaultTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: default
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: '8081'
  CloudWatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: apis
      RetentionInDays: 1
  ContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: for ecs containers
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: -1
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: books-tg
      VpcId: !Ref VPC
      Port: 8081
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10
      TargetType: ip
  ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 2
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /